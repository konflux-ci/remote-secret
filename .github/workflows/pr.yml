#
# Copyright (c) 2021 Red Hat, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Validate PRs

on:
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.20'
  KIND_VERSION: '0.20.0'
  K8S_VERSION: '1.26.x'
  GOMEGA_DEFAULT_EVENTUALLY_TIMEOUT: 10s
jobs:
  go:
    name: Check sources
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: Download dependencies
        run: go mod download
      - name: Check go mod status
        run: |
          go mod tidy
          if [[ ! -z $(git status -s) ]]
          then
            echo "Go mod state is not clean:"
            git --no-pager diff
            exit 1
          fi
      - name: Check format
        run: |
          go install github.com/google/addlicense@latest
          go install golang.org/x/tools/cmd/goimports@latest
          git reset HEAD --hard
          make check_fmt
          if [[ $? != 0 ]]
          then
            echo "not well formatted sources are found:"
            git --no-pager diff
            exit 1
          fi
      - name: Check manifests
        run: |
          # Note: fmt is necessary after generate since generated sources will
          #       fail format check by default.
          make generate fmt manifests
          if [[ ! -z $(git status -s) ]]
          then
            echo "generated sources are not up to date:"
            git --no-pager diff
            exit 1
          fi
      - name: Setup KinD
        uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: ${{ env.K8S_VERSION }}
          kind-version: ${{ env.KIND_VERSION }}
      - name: Run Go Tests
        run: |
          make test
      - uses: chainguard-dev/actions/kind-diag@main
        # Only upload logs on failure.
        if: ${{ failure() }}
        with:
          cluster-resources: nodes,namespaces,
          namespace-resources: configmaps,pods,svc
          artifact-name: kind-logs
      - name: Codecov
        uses: codecov/codecov-action@v3
  spi-check:
    name: Check spi compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Checkout SPI Repository
        run: |
          IFS="/" read -r fork_owner forked_repo <<< "$(echo "${{ github.event.pull_request.head.repo.full_name }}" | tr '/' ' ')"
          echo "Fork owner: ${fork_owner}"
          # Check if there is a PR in the original repository from the fork owner with the same branch name
          pr_number=$(gh pr list --repo "redhat-appstudio/service-provider-integration-operator" --state all --author "${fork_owner}" --base main --head "${forked_repo}:${{ github.event.pull_request.head.ref }}" --json number --jq '.[0].number' || true)
          echo "PR number: ${pr_number}"
          if [ -n "${pr_number}" ]; then
            # A PR exists, check out that branch
            mkdir -p spi
            cd spi          
            gh pr checkout ${pr_number}
          else
            # No PR, check out the main branch
            git clone "https://github.com/redhat-appstudio/service-provider-integration-operator.git" spi
          fi
      - name: Check SPI mod
        run: |
          sed -i  '4 i replace github.com/redhat-appstudio/remote-secret => ../' ./spi/go.mod
          sed -i  '5 i replace github.com/Azure/azure-sdk-for-go => github.com/Azure/azure-sdk-for-go v67.2.0+incompatible' ./spi/go.mod
          cd spi
          cat go.mod
          go mod tidy
          git diff
      - name: Setup KinD
        uses: chainguard-dev/actions/setup-kind@main
        with:
          k8s-version: ${{ env.K8S_VERSION }}
          kind-version: ${{ env.KIND_VERSION }}
      - name: Run Go Tests
        run: |
          cd spi
          make test
      - uses: chainguard-dev/actions/kind-diag@main
        # Only upload logs on failure.
        if: ${{ failure() }}
        with:
          cluster-resources: nodes,namespaces,
          namespace-resources: configmaps,pods,svc
          artifact-name: kind-logs
  docker-controller:
    name: Check controller docker image build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if dockerimage build is working
        run: docker build -f ./Dockerfile .
