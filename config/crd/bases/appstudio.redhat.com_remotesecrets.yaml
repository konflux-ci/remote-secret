---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: remotesecrets.appstudio.redhat.com
spec:
  group: appstudio.redhat.com
  names:
    kind: RemoteSecret
    listKind: RemoteSecretList
    plural: remotesecrets
    singular: remotesecret
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: RemoteSecret is the Schema for the RemoteSecret API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RemoteSecretSpec defines the desired state of RemoteSecret
            properties:
              secret:
                description: Secret defines the properties of the secret and the linked
                  service accounts that should be created in the target namespaces.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations is the keys and values that the create
                      secret should be annotated with.
                    type: object
                  generateName:
                    type: string
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels contains the labels that the created secret
                      should be labeled with.
                    type: object
                  linkedTo:
                    description: LinkedTo specifies the objects that the secret is
                      linked to. Currently, only service accounts are supported.
                    items:
                      properties:
                        serviceAccount:
                          description: ServiceAccounts lists the service accounts
                            that the secret is linked to.
                          properties:
                            as:
                              default: secret
                              description: As specifies how the secret generated by
                                the binding is linked to the service account. This
                                can be either `secret` meaning that the secret is
                                listed as one of the mountable secrets in the `secrets`
                                of the service account, `imagePullSecret` which makes
                                the secret listed as one of the image pull secrets
                                associated with the service account. If not specified,
                                it defaults to `secret`.
                              type: string
                            managed:
                              description: Managed specifies the service account that
                                is bound to the lifetime of the binding. This service
                                account must not exist and is created and deleted
                                along with the injected secret.
                              properties:
                                annotations:
                                  additionalProperties:
                                    type: string
                                  description: Annotations is the keys and values
                                    that the created service account should be annotated
                                    with.
                                  type: object
                                generateName:
                                  description: GenerateName is the generate name to
                                    be used when creating the service account. It
                                    only really makes sense for the Managed service
                                    accounts that are cleaned up with the binding.
                                  type: string
                                labels:
                                  additionalProperties:
                                    type: string
                                  description: Labels contains the labels that the
                                    created service account should be labeled with.
                                  type: object
                                name:
                                  description: Name is the name of the service account
                                    to create/link. Either this or GenerateName must
                                    be specified.
                                  type: string
                              type: object
                            reference:
                              description: Reference specifies a pre-existing service
                                account that the secret should be linked to. It is
                                an error if the service account doesn't exist when
                                the operator tries to add a link to a secret with
                                the injected token.
                              properties:
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                      type: object
                    type: array
                  name:
                    description: Name is the name of the secret to be created. If
                      it is not defined a random name based on the name of the binding
                      is used.
                    type: string
                  type:
                    description: Type is the type of the secret to be created. If
                      left empty, the default type used in the cluster is assumed
                      (typically Opaque). The type of the secret defines the automatic
                      mapping of the token record fields to keys in the secret data
                      according to the documentation https://kubernetes.io/docs/concepts/configuration/secret/#secret-types.
                      Only kubernetes.io/service-account-token, kubernetes.io/dockercfg,
                      kubernetes.io/dockerconfigjson and kubernetes.io/basic-auth
                      are supported. All other secret types need to have their mapping
                      specified manually using the Fields.
                    type: string
                type: object
              targets:
                description: Targets is the list of the target namespaces that the
                  secret and service accounts should be deployed to.
                items:
                  properties:
                    apiUrl:
                      description: ApiUrl specifies the URL of the API server of a
                        remote Kubernetes cluster that this target points to. If left
                        empty, the local cluster is assumed.
                      type: string
                    clusterCredentialsSecret:
                      description: ClusterCredentialsSecret is the name of the secret
                        in the same namespace as the RemoteSecret that contains the
                        token to use to authenticate with the remote Kubernetes cluster.
                        This is ignored if `apiUrl` is empty.
                      type: string
                    namespace:
                      description: Namespace is the name of the target namespace to
                        which to deploy.
                      type: string
                  type: object
                type: array
            required:
            - secret
            type: object
          status:
            description: RemoteSecretStatus defines the observed state of RemoteSecret
            properties:
              conditions:
                description: Conditions is the list of conditions describing the state
                  of the deployment to the targets.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              secret:
                description: Secret is the remote secret overall.
                properties:
                  keys:
                    items:
                      type: string
                    type: array
                type: object
              targets:
                description: Targets is the list of the deployment statuses for individual
                  targets in the spec.
                items:
                  properties:
                    apiUrl:
                      description: ApiUrl is the URL of the remote Kubernetes cluster
                        to which the target points to.
                      type: string
                    error:
                      description: Error the optional error message if the deployment
                        of either the secret or the service accounts failed.
                      type: string
                    namespace:
                      description: Namespace is the namespace of the target where
                        the secret and the service accounts have been deployed to.
                      type: string
                    secretName:
                      description: SecretName is the name of the secret that is actually
                        deployed to the target namespace
                      type: string
                    serviceAccountNames:
                      description: ServiceAccountNames is the names of the service
                        accounts that have been deployed to the target namespace
                      items:
                        type: string
                      type: array
                  required:
                  - namespace
                  - secretName
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
